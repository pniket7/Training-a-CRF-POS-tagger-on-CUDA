# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ulA2ufQKCWhR4MeeCi9doSiKMqk5F1Wn
"""

import torch
print(torch.cuda.is_available())

pip install python-crfsuite

import torch
import pycrfsuite

# Function to read the dataset
def read_dataset(file_path):
    sentences = []
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
        sentence = []
        for line in lines:
            line = line.strip()
            if line.startswith('#') or line == '':
                continue
            if line == 'ред':
                sentences.append(sentence)
                sentence = []
            else:
                tokens = line.split('\t')
                word = tokens[1]
                pos_tag = tokens[3]
                sentence.append((word, pos_tag))
    return sentences

# Function to extract features from sentences
def extract_features(sentence):
    features = []
    for i in range(len(sentence)):
        word = sentence[i][0]
        features.append([
            'bias',
            'word.lower=' + word.lower(),
            'word[-3:]=' + word[-3:],
            'word[-2:]=' + word[-2:],
            'word.isupper=%s' % word.isupper(),
            'word.istitle=%s' % word.istitle(),
            'word.isdigit=%s' % word.isdigit()
        ])
        if i > 0:
            prev_word = sentence[i-1][0]
            features[-1].extend([
                '-1:word.lower=' + prev_word.lower(),
                '-1:word.istitle=%s' % prev_word.istitle(),
                '-1:word.isupper=%s' % prev_word.isupper()
            ])
        else:
            features[-1].append('BOS')
        
        if i < len(sentence)-1:
            next_word = sentence[i+1][0]
            features[-1].extend([
                '+1:word.lower=' + next_word.lower(),
                '+1:word.istitle=%s' % next_word.istitle(),
                '+1:word.isupper=%s' % next_word.isupper()
            ])
        else:
            features[-1].append('EOS')
    return features

# Function to extract POS tags from sentences
def extract_labels(sentence):
    return [pos_tag for _, pos_tag in sentence]

# Function to train the CRF model on CUDA
def train_crf_model_cuda(features, labels, model_file):
    cuda_device_index = 0
    cuda_device = torch.device('cuda', cuda_device_index)
    torch.cuda.set_device(cuda_device_index)
    
    with torch.cuda.device(cuda_device):
        trainer = pycrfsuite.Trainer(verbose=False)

        for x, y in zip(features, labels):
            trainer.append(x, y)

        trainer.set_params({
            'c1': 1.0,
            'c2': 1e-3,
            'max_iterations': 50,
            'feature.possible_transitions': True
        })

        trainer.train(model_file)

# Path to the dataset file
dataset_file = 'Hindi_Treebank.txt'

# Path to save the CUDA-trained model
cuda_model_file = 'Cuda_Model_CRF.crfsuite'

# Read the dataset
dataset = read_dataset(dataset_file)

# Extract features and labels from the dataset
features = [extract_features(sentence) for sentence in dataset]
labels = [extract_labels(sentence) for sentence in dataset]

# Train the CRF model on CUDA
train_crf_model_cuda(features, labels, cuda_model_file)
print("Model trained on CUDA successfully.")

